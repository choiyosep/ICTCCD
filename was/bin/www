#!/usr/bin/env node
const debug = require('debug')('was:server')
    , http = require('http')
    , fs = require('fs')
    , port = normalizePort(process.env.PORT || '3000')
    , app = require('../app')
    , DB = require('../core/Database')
    , Firebase = require('../core/Firebase');


app.set('port', port);

/**
 * DB initialize
 */
(async () => {
    try {

        DB.conn = await DB.initialize();
        await Firebase.initialize();
        //푸시알림 테스트(정상작동)
        // Firebase.sendPushTest();

        /**
         * Task Init
         */
        // const tasks = fs.readdirSync('task');
        // tasks.forEach(task => require('../task/' + task)());

        const server = http.createServer(app);
        server.listen(port);

        server.on('error', (error) => {
            if (error.syscall !== 'listen') {
                throw error;
            }
            let bind = typeof port === 'string'
                ? 'Pipe ' + port
                : 'Port ' + port;
            switch (error.code) {
                case 'EACCES':
                    console.error(bind + ' requires elevated privileges');
                    process.exit(1);
                    break;
                case 'EADDRINUSE':
                    console.error(bind + ' is already in use');
                    process.exit(1);
                    break;
                default:
                    throw error;
            }
        });
        server.on('listening', () => {
            let addr = server.address();
            let bind = typeof addr === 'string'
                ? 'pipe ' + addr
                : 'port ' + addr.port;
            debug('Listening on ' + bind);
        });
    } catch (err) {
        console.error('Database Initialize Failed!');
    }
})();

function normalizePort(val) {
    let port = parseInt(val, 10);
    if (isNaN(port)) {
        return val;
    }
    if (port >= 0) {
        return port;
    }
    return false;
}

